rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Allow access from GitHub Pages domain
    match /{document=**} {
      allow read: if request.auth != null && 
                 (request.origin == null || 
                  request.origin.matches('https://praveen120228.github.io'));
    }

    // Authentication helper function
    function isAuthenticated() {
      return request.auth != null;
    }

    // User role verification functions
    function isEmployee() {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userType == 'employee';
    }

    function isCompany() {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userType == 'company';
    }

    function isStartupFounder() {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userType == 'startup';
    }

    function isFreelancer() {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userType == 'freelancer';
    }

    function isRecruitmentAgency() {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userType == 'recruitment';
    }

    // User profile rules
    match /users/{userId} {
      allow create: if request.auth != null;
      allow read, write: if request.auth.uid == userId;
    }

    // Company enrollment rules
    match /company_enrollments/{enrollmentId} {
      allow create: if isCompany();
      allow read: if isCompany() || isEmployee();
    }

    // Job posting rules
    match /job_postings/{postingId} {
      allow create: if isCompany();
      allow read: if isAuthenticated();
      allow update, delete: if isCompany() && request.auth.uid == resource.data.companyId;
    }

    // Freelancer profile rules
    match /freelancer_profiles/{freelancerId} {
      allow create, update: if isFreelancer() && request.auth.uid == freelancerId;
      allow read: if isAuthenticated();
    }

    // Recruitment agency rules
    match /recruitment_agencies/{agencyId} {
      allow create, update: if isRecruitmentAgency() && request.auth.uid == agencyId;
      allow read: if isAuthenticated();
    }

    // Verification document rules
    match /verification_documents/{documentId} {
      allow create: if isAuthenticated();
      allow read: if request.auth.uid == resource.data.userId;
    }

    // Messaging/Chat rules
    match /conversations/{conversationId} {
      allow read, write: if isAuthenticated() && 
                           (request.auth.uid in resource.data.participants);
    }
  }
}
